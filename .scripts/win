#!/usr/bin/env python

import curses
import curses.textpad

users = [
    'kallgren2',
    'Kallgren3',
    'kallgren4',
    'bot',
    'random'
]

def completenick(beginning):
    return [user for user in users if user.startswith(beginning)]

class Client:
    def __init__(self, stdscr):
        self.stdscr = stdscr
        
        curses.use_default_colors()
        for i in range(0, curses.COLORS):
            curses.init_pair(i+1, i, -1)
        curses.init_pair(17, -1, curses.COLOR_BLACK)
        
        self.LINES, self.COLS = self.stdscr.getmaxyx()
        self.SIDEBARWIDTH = 15
        self.HISTORY = 1000
        self.position = 0

        self.nick = 'kallgren'
        users.append(self.nick)

        self.compi = 0 # Completion index
        self.comptext = '' # Last completion attempt
        
        self.content = curses.newpad(self.HISTORY, self.COLS - self.SIDEBARWIDTH - 1)
        self.content.scrollok(True) # For when history is full
        
        self.sidebar = self.stdscr.subpad(0, self.COLS - self.SIDEBARWIDTH)

        users.sort(key = str.lower)
        for user in users:
            self.sidebar.addstr(user + '\n')

        # sidebar.vline(curses.ACS_VLINE, self.LINES - 2)
        self.sidebar.refresh()

        self.divider = curses.newwin(self.LINES - 2, 1, 0, self.COLS - self.SIDEBARWIDTH - 1)
        self.divider.bkgd('|', curses.color_pair(1))
        self.divider.refresh()
        
        self.statusbar = curses.newwin(1, self.COLS, self.LINES - 2, 0)
        self.statusbar.bkgd(' ', curses.color_pair(17))
        self.statusbar.addstr(' Chatting as ' + self.nick + ' [connected]')
        self.statusbar.refresh()
        
        self.bufwin = curses.newwin(1, self.COLS, self.LINES - 1, 0)
        self.bufwin.refresh()
        
        self.textbox = curses.textpad.Textbox(self.bufwin)
        self.textbox.stripspaces = True

    def start(self):
        while True:
            text = self.textbox.edit(self.handle)
            self.bufwin.erase()
            text = text.strip() # To get rid of a trailing whitespace
            if text == "/quit":
                return
            elif text == "/clear":
                self.content.erase()
                self.position = 0
            elif text.startswith('/nick '): # No more checks needed because we stripped spaces
                self.nick = text.split()[1]
            else:
                try:
                    self.content.addstr(self.nick, curses.color_pair(5))
                    self.content.addstr(' | ', curses.color_pair(8))
                    self.content.addstr(text + '\n')
                    y, x = self.content.getyx()
                    if y - self.position > self.LINES - 2: # If the whole buffer is filled
                        self.position = y - (self.LINES - 2)
                except curses.error:
                    pass            
            self.content.refresh(self.position, 0, 0, 0, self.LINES - 3, self.COLS - self.SIDEBARWIDTH - 1)

    def handle(self, ch):
        if ch == curses.KEY_RESIZE:
            self.resize()
        elif ch == curses.KEY_UP:
            if self.position > 0:
                self.position -= 1
                self.content.refresh(self.position, 0, 0, 0, self.LINES - 3, self.COLS - self.SIDEBARWIDTH - 1)
        elif ch == curses.KEY_DOWN:
            y, x = self.content.getyx()
            if y > self.position + self.LINES - 2:
                self.position += 1
                self.content.refresh(self.position, 0, 0, 0, self.LINES - 3, self.COLS - self.SIDEBARWIDTH - 1)
        elif ch == curses.KEY_HOME:
            if self.position != 0:
                self.position = 0
                self.content.refresh(self.position, 0, 0, 0, self.LINES - 3, self.COLS - self.SIDEBARWIDTH - 1)
        elif ch == curses.KEY_END:
            y, x = self.content.getyx()
            if y >= self.LINES - 2:
                self.position = y - (self.LINES - 2)
                self.content.refresh(self.position, 0, 0, 0, self.LINES - 3, self.COLS - self.SIDEBARWIDTH - 1)
        elif ch == curses.ascii.TAB:
            if self.compi == 0: # If there is a new string to complete
                self.comptext = self.textbox.gather().strip()
            
            completions = completenick(self.comptext)
            if len(completions) > 0:
                self.bufwin.erase()
                if len(completions) <= self.compi:
                    self.compi = 0 # Back to the beginning
                self.bufwin.addstr(completions[self.compi] + ': ')
            self.compi += 1
            return ''
        else:
            self.compi = 0 # Reset completion index to signal that something was changed
            return ch

    def resize(self):
        self.LINES, self.COLS = self.stdscr.getmaxyx()
        self.content.resize(self.LINES - 2, self.COLS - self.SIDEBARWIDTH - 1)
        self.content.refresh(self.position, 0, 0, 0, self.LINES - 2, self.COLS - self.SIDEBARWIDTH - 1)
        self.sidebar.mvwin(0, self.COLS - self.SIDEBARWIDTH)
        # self.sidebar.resize(self.LINES - 2, self.SIDEBARWIDTH)
        self.sidebar.refresh()
        self.divider.mvwin(0, self.COLS - self.SIDEBARWIDTH - 1)
        self.divider.resize(self.LINES - 2, 1)
        self.divider.refresh()
        self.statusbar.mvwin(self.LINES - 2, 0)
        self.statusbar.resize(1, self.COLS)
        self.statusbar.refresh()
        self.bufwin.mvwin(self.LINES - 1, 0)
        self.bufwin.resize(1, self.COLS)

class ScrollWindow:
    def __init__(self, parent, HISTORY=None):
        self.parent = parent
        self.BEGY, self.BEGX = parent.getbegyx()
        self.MAXY, self.MAXX = parent.getmaxyx()

        if HISTORY < self.MAXY or HISTORY is None:
            self.HISTORY = self.MAXY
        else:
            self.HISTORY = HISTORY

        self.pad = curses.newpad(self.HISTORY, self.MAXX)
        self.pad.scrollok(True)
        self.position = 0
        
    def refresh(self):
        self.pad.refresh(self.position, 0, self.BEGY, self.BEGX, self.MAXY - 1,
                         self.MAXX)

    def addstr(self, string):
        self.pad.addstr(string)

    def erase(self):
        self.pad.erase()
        self.position = 0

    def scroll(self, lines=1):
        y, x = self.pad.getyx()
        if self.position + lines < 0:
            self.position = 0
        elif self.position + lines + self.MAXY > y:
            self.position = y - self.MAXY
        else:
            self.position += lines

    def home(self):
        if self.position != 0:
            self.position = 0

    def end(self):
        y, x = self.pad.getyx()
        if y > self.MAXY:
            self.position = y - self.MAXY

def main(stdscr):
    Client(stdscr).start()

if __name__ == '__main__':
    curses.wrapper(main)
