#!/usr/bin/env python

import curses
import curses.textpad
import socket
import threading

address = 'localhost'
port = 8040
lock = threading.Lock()

class Client:
    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.nick = nick
        self.connected = False
        if self.__init_connection__():
            self.connected = True
            self.__init_colors__()
            self.__init_variables__()
            self.__init_windows__()

    def __init_connection__(self):
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.connect((address, port))
        self.server.send("CONNECT:" + self.nick + ":KGNChat Python Client\n")
        response = self.server.recv(2040)
        clean = response.rstrip('\n')
        split = clean.split(':')
        if split[0] == 'OK':
            split.pop(0)
            if split[0] != '': # Empty chat
                self.users = split
            else:
                self.users = []
            return True
        return False

    def __init_colors__(self):
        curses.use_default_colors()
        for i in range(0, curses.COLORS):
            curses.init_pair(i + 1, i, -1)
        curses.init_pair(17, -1, curses.COLOR_BLACK)

    def __init_variables__(self):
        self.MAXY, self.MAXX = self.stdscr.getmaxyx()
        self.SIDEBARWIDTH = 15
        self.HISTORY = 1000
        self.MAXUSERS = 500

        self.users.append(self.nick)
        self.users.sort(key = str.lower)

        self.compi = 0 # Completion index
        self.comptext = '' # Previous completion attempt

    def __init_windows__(self):
        # Content area
        height = self.MAXY - 2
        width = self.MAXX - self.SIDEBARWIDTH - 1
        self.container = self.stdscr.subwin(height, width, 0, 0)
        self.content = ScrollWindow(self.container, self.HISTORY)

        # Sidebar divider
        width = 1
        begin_x = self.MAXX - self.SIDEBARWIDTH - 1
        self.divider = self.stdscr.subwin(height, width, 0, begin_x)
        self.divider.bkgd('|', curses.color_pair(1))

        # Sidebar
        width = self.SIDEBARWIDTH - 1
        begin_x = self.MAXX - self.SIDEBARWIDTH
        self.sidecontainer = self.stdscr.subwin(height, width, 0, begin_x)
        self.sidebar = ScrollWindow(self.sidecontainer, self.MAXUSERS)
        for user in self.users:
            self.sidebar.addstr(user + '\n')

        # Statusbar
        height = 1
        width = self.MAXX
        begin_y = self.MAXY - 2
        self.statusbar = self.stdscr.subwin(height, width, begin_y, 0)
        self.statusbar.bkgd(' ', curses.color_pair(17))
        self.statusbar.addstr(' Chatting as ' + self.nick + ' [connected]')
        
        # Input area
        begin_y = self.MAXY - 1
        self.bufwin = self.stdscr.subwin(height, width, begin_y, 0)
        self.textbox = curses.textpad.Textbox(self.bufwin)
        self.textbox.stripspaces = True        

        self.content.refresh()
        self.divider.refresh()
        self.sidebar.refresh()
        self.statusbar.refresh()
        self.bufwin.refresh()

    def listener(self):
        while self.running:
            message = self.server.recv(2040)
            clean = message.rstrip('\n')
            split = clean.split(':')
            if split[0] == 'MSG':
                split.pop(0)
                user = split.pop(0)
                message = ':'.join(split)
                lock.acquire()
                atbottom = self.content.atbottom()
                self.addmessage(user, message)
                if atbottom:
                    self.content.end()
                self.content.refresh()
                lock.release()
            elif split[0] == 'JOIN':
                user = split[1]
                self.users.append(user)
                lock.acquire()
                atbottom = self.content.atbottom()
                self.content.addstr(user + ' has joined the chat!\n',
                                    curses.color_pair(3))
                if atbottom:
                    self.content.end()
                self.content.refresh()
                lock.release()
                self.updatesidebar()
            elif split[0] == 'LEAVE':
                user = split[1]
                self.users.remove(user)
                lock.acquire()
                atbottom = self.content.atbottom()
                self.content.addstr(user + ' has left the chat.\n',
                                    curses.color_pair(2))
                if atbottom:
                    self.content.end()
                self.content.refresh()
                lock.release()
                self.updatesidebar()
            elif split[0] == 'BROADCAST':
                split.pop(0)
                message = ':'.join(split)
                lock.acquire()
                atbottom = self.content.atbottom()
                self.content.addstr('*** Server broadcast: ' + message + ' ***\n',
                                    curses.color_pair(2))
                if atbottom:
                    self.content.end()
                self.content.refresh()
                lock.release()
            else:
                lock.acquire()
                atbottom = self.content.atbottom()
                self.content.addstr(message)
                if atbottom:
                    self.content.end()
                self.content.refresh()
                lock.release()

    def updatesidebar(self):
        self.sidebar.erase()
        self.users.sort(key = str.lower)
        for user in self.users:
            self.sidebar.addstr(user + '\n')
        self.sidebar.refresh()

    def start(self):
        self.running = True
        listener = threading.Thread(target=self.listener)
        listener.start()

        while True:
            text = self.textbox.edit(self.validator)
            self.bufwin.erase()
            text = text.strip() # To get rid of a trailing whitespace

            if text == "/quit":
                self.stop()
                return
            elif text == "/clear":
                self.content.erase()
            elif text.startswith('/nick '): # No more checks because of strip
                self.nick = text.split()[1]
            else:
                try:
                    self.send_to_server(text)
                    lock.acquire()
                    self.addmessage(self.nick, text)
                    self.content.end()
                    lock.release()
                except curses.error:
                    pass            
            self.content.refresh()

    def send_to_server(self, message):
        self.server.send('SAY:' + message + '\n')

    def addmessage(self, user, message):
        self.content.addstr(user, curses.color_pair(5))
        self.content.addstr(': ', curses.color_pair(8))
        self.content.addstr(message + '\n')
        self.resetcursor()

    def resetcursor(self):
        self.bufwin.refresh()

    def completenick(self, beginning):
        return [user for user in self.users if user.startswith(beginning)]

    def validator(self, ch):
        if ch == curses.KEY_RESIZE:
            self.resize()
        elif ch == curses.KEY_UP:
            self.content.scroll(-1)
            self.content.refresh()
            self.resetcursor()
        elif ch == curses.KEY_DOWN:
            self.content.scroll(1)
            self.content.refresh()
            self.resetcursor()
        elif ch == curses.KEY_PPAGE:
            self.sidebar.scroll(-1)
            self.sidebar.refresh()
            self.resetcursor()
        elif ch == curses.KEY_NPAGE:
            self.sidebar.scroll(1)
            self.sidebar.refresh()
            self.resetcursor()
        elif ch == curses.KEY_HOME:
            self.content.home()
            self.content.refresh()
            self.resetcursor()
        elif ch == curses.KEY_END:
            self.content.end()
            self.content.refresh()
            self.resetcursor()
        elif ch == curses.ascii.TAB:
            if self.compi == 0: # If there is a new string to complete
                self.comptext = self.textbox.gather().strip()
            
            completions = self.completenick(self.comptext)
            if len(completions) > 0:
                self.bufwin.erase()
                if len(completions) <= self.compi:
                    self.compi = 0 # Back to the beginning
                self.bufwin.addstr(completions[self.compi] + ': ')
            self.compi += 1
            return ''
        else:
            self.compi = 0 # Reset index to signal that something was changed
            return ch

    def resize(self):
        self.MAXY, self.MAXX = self.stdscr.getmaxyx()

        height = self.MAXY - 2
        width = self.MAXX - self.SIDEBARWIDTH - 1
        self.container.resize(height, width)
        self.content.resize()

        width = 1
        begin_x = self.MAXX - self.SIDEBARWIDTH - 1
        self.divider.mvwin(0, begin_x)
        self.divider.resize(height, width)
        self.divider.erase()
        self.divider.bkgd('|', curses.color_pair(1))

        width = self.SIDEBARWIDTH - 1
        begin_x = self.MAXX - self.SIDEBARWIDTH
        self.sidecontainer.mvwin(0, begin_x)
        self.sidecontainer.resize(height, width)
        self.sidebar.resize()

        height = 1
        width = self.MAXX
        begin_y = self.MAXY - 2
        self.statusbar.mvwin(begin_y, 0)
        self.statusbar.resize(height, width)
        self.statusbar.erase()
        self.statusbar.bkgd(' ', curses.color_pair(17))
        self.statusbar.addstr(' Chatting as ' + self.nick + ' [connected]')

        begin_y = self.MAXY - 1
        self.bufwin.mvwin(begin_y, 0)
        self.bufwin.resize(height, width)
        text = self.textbox.gather()
        text = text.strip()
        self.bufwin.erase()
        try:
            self.bufwin.addstr(text)
        except curses.error:
            pass
        self.textbox = curses.textpad.Textbox(self.bufwin)
        self.textbox.stripspaces = True        

        self.content.end()
        self.content.refresh()
        self.divider.refresh()
        self.content.home()
        self.sidebar.refresh()
        self.statusbar.refresh()
        self.bufwin.refresh()

    def stop(self):
        self.running = False
        self.server.close()

class ScrollWindow:
    def __init__(self, parent, HISTORY=None):
        self.parent = parent
        self.BEGY, self.BEGX = self.parent.getbegyx()
        self.MAXY, self.MAXX = self.parent.getmaxyx()
        self.MAXY += self.BEGY
        self.MAXX += self.BEGX

        if HISTORY < self.MAXY or HISTORY is None:
            self.HISTORY = self.MAXY
        else:
            self.HISTORY = HISTORY

        self.pad = curses.newpad(self.HISTORY, self.MAXX)
        self.pad.scrollok(True)
        self.position = 0
        
    def refresh(self):
        self.pad.refresh(self.position, 0, self.BEGY, self.BEGX,
                         self.MAXY - 1, self.MAXX)

    def resize(self):
        self.BEGY, self.BEGX = self.parent.getbegyx()
        self.MAXY, self.MAXX = self.parent.getmaxyx()
        self.MAXY += self.BEGY
        self.MAXX += self.BEGX
        self.pad.resize(self.HISTORY, self.MAXX)

    def addstr(self, string, attr=0):
        self.pad.addstr(string, attr)

    def erase(self):
        self.pad.erase()
        self.position = 0

    def bkgd(self, ch, attr=0):
        self.pad.bkgd(ch, attr)

    def scroll(self, lines=1):
        y, x = self.pad.getyx()
        if self.position + lines < 0:
            self.position = 0
        elif self.position + lines + self.MAXY > y:
            self.position = y - self.MAXY
        else:
            self.position += lines

    def home(self):
        if self.position != 0:
            self.position = 0

    def end(self):
        y, x = self.pad.getyx()
        if y > self.MAXY:
            self.position = y - self.MAXY

    def atbottom(self):
        y, x = self.pad.getyx()
        return y <= self.MAXY or y == (self.position + self.MAXY)

def main(stdscr):
    client = Client(stdscr)
    if client.connected:
        client.start()

if __name__ == '__main__':
    global nick
    nick = raw_input('Nick: ')
    curses.wrapper(main)
